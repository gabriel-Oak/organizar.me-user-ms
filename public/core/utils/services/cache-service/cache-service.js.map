{"version":3,"file":"cache-service.js","sources":["core/utils/services/cache-service/cache-service.ts"],"sourceRoot":"/","sourcesContent":["import { KeyType } from 'crypto';\nimport { Redis as RedisClient } from 'ioredis';\nimport { ILoggerService } from '../logger-service/types';\nimport { ICacheService } from './types';\nimport Injectable from '../../decorators/injectable';\nimport { inject } from 'inversify';\n\n@Injectable('ICacheService')\nexport default class CacheService implements ICacheService {\n  constructor(\n    @inject('RedisClient') private readonly client: RedisClient,\n    @inject('ILoggerService') private readonly logger: ILoggerService\n  ) { }\n\n  async get<T>(key: string) {\n    try {\n      let value: unknown = await this.client.get(key);\n\n      try {\n        value = value ? JSON.parse(value as string) as T : null\n      } catch (_) {\n        return value as T;\n      }\n    } catch (error) {\n      this.logger.warn((error as any).message ?? error, error);\n    }\n    return null;\n  }\n\n  async set<T>(key: string, value: T, expirationSeconds = 60 * 60) {\n    try {\n      await this.client.set(key, JSON.stringify(value), 'EX', expirationSeconds);\n    } catch (error) {\n      this.logger.warn((error as any).message ?? error, error);\n    }\n  }\n\n  async del(args: KeyType[]) {\n    try {\n      return await this.client.del(args);\n    } catch (error) {\n      this.logger.warn((error as any).message ?? error, error);\n    }\n    return null\n  }\n\n  async delPrefix(prefix: string) {\n    try {\n      let keys = await this.client.keys(`cache:${prefix}`);\n      keys = keys.map((key) => key.replace('cahce:', ''));\n\n      return await this.del(keys as unknown as KeyType[]);\n    } catch (error) {\n      this.logger.warn((error as any).message ?? error, error);\n    }\n    return null\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,qCAA+C;AAG/C,6EAAqD;AACrD,yCAAmC;AAGpB,IAAM,YAAY,GAAlB,MAAM,YAAY;IAC/B,YAC0C,MAAmB,EAChB,MAAsB;QADzB,WAAM,GAAN,MAAM,CAAa;QAChB,WAAM,GAAN,MAAM,CAAgB;IAC/D,CAAC;IAEL,KAAK,CAAC,GAAG,CAAI,GAAW;QACtB,IAAI,CAAC;YACH,IAAI,KAAK,GAAY,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEhD,IAAI,CAAC;gBACH,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAe,CAAM,CAAC,CAAC,CAAC,IAAI,CAAA;YACzD,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,OAAO,KAAU,CAAC;YACpB,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,KAAa,CAAC,OAAO,IAAI,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,GAAG,CAAI,GAAW,EAAE,KAAQ,EAAE,iBAAiB,GAAG,EAAE,GAAG,EAAE;QAC7D,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,iBAAiB,CAAC,CAAC;QAC7E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,KAAa,CAAC,OAAO,IAAI,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,IAAe;QACvB,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,KAAa,CAAC,OAAO,IAAI,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;QACD,OAAO,IAAI,CAAA;IACb,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,MAAc;QAC5B,IAAI,CAAC;YACH,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,MAAM,EAAE,CAAC,CAAC;YACrD,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;YAEpD,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,IAA4B,CAAC,CAAC;QACtD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,KAAa,CAAC,OAAO,IAAI,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;QACD,OAAO,IAAI,CAAA;IACb,CAAC;CACF,CAAA;AAjDoB,YAAY;IADhC,IAAA,oBAAU,EAAC,eAAe,CAAC;IAGvB,WAAA,IAAA,kBAAM,EAAC,aAAa,CAAC,CAAA;IACrB,WAAA,IAAA,kBAAM,EAAC,gBAAgB,CAAC,CAAA;qCADuB,eAAW;GAF1C,YAAY,CAiDhC;kBAjDoB,YAAY","debug_id":"6f3d70ad-861e-57a7-942c-dad00c74fa7d"}