{"version":3,"file":"logger-service.js","sources":["core/utils/services/logger-service/logger-service.ts"],"sourceRoot":"/","sourcesContent":["/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport winston, { Logger } from 'winston';\nimport { ILoggerService } from './types';\nimport Injectable from '../../decorators/injectable';\nimport { inject } from 'inversify';\nimport * as Sentry from '@sentry/node';\n\n@Injectable('ILoggerService')\nexport default class LoggerService implements ILoggerService {\n  constructor(\n    @inject('Logger') private readonly logger: Logger\n  ) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.add(new winston.transports.Console({\n        format: this.format\n      }));\n    }\n  }\n\n  protected format = winston.format.printf(({ level, message }) => {\n    const payload = `${new Date().toLocaleString('pt-BR')} [${level.toUpperCase()}]: ${message.message ||\n      message.error ||\n      message}`;\n    if (level === 'error') Sentry.captureException(payload);\n    else Sentry.captureMessage(payload);\n\n    return payload;\n  });\n\n  info(message: string, data?: unknown) {\n    let payload = message;\n    if (data) payload += `: ${JSON.stringify(data, null, 2)}`\n\n    this.logger.info(payload, data);\n  }\n\n  error(message: string, data?: unknown) {\n    let payload = message;\n    if (data) payload += `: ${JSON.stringify(data, null, 2)}`\n\n    this.logger.error(payload, data);\n  }\n\n  warn(message: string, data?: unknown) {\n    let payload = message;\n    if (data) payload += `: ${JSON.stringify(data, null, 2)}`\n    this.logger.warn(payload, data);\n  }\n\n  debug(message: string, data?: unknown) {\n    let payload = message;\n    if (data) payload += `: ${JSON.stringify(data, null, 2)}`\n    this.logger.debug(payload, data);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAqE;AACrE,mDAA0C;AAE1C,6EAAqD;AACrD,yCAAmC;AACnC,qDAAuC;AAGxB,IAAM,aAAa,GAAnB,MAAM,aAAa;IAChC,YACoB,MAA+B;QAAd,WAAM,GAAN,MAAM,CAAQ;QASzC,WAAM,GAAG,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE;YAC9D,MAAM,OAAO,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,MAAM,OAAO,CAAC,OAAO;gBAChG,OAAO,CAAC,KAAK;gBACb,OAAO,EAAE,CAAC;YACZ,IAAI,KAAK,KAAK,OAAO;gBAAE,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;;gBACnD,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAEpC,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;QAfD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YAC1C,MAAM,CAAC,GAAG,CAAC,IAAI,iBAAO,CAAC,UAAU,CAAC,OAAO,CAAC;gBACxC,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC,CAAC,CAAC;QACN,CAAC;IACH,CAAC;IAYD,IAAI,CAAC,OAAe,EAAE,IAAc;QAClC,IAAI,OAAO,GAAG,OAAO,CAAC;QACtB,IAAI,IAAI;YAAE,OAAO,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAA;QAEzD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,OAAe,EAAE,IAAc;QACnC,IAAI,OAAO,GAAG,OAAO,CAAC;QACtB,IAAI,IAAI;YAAE,OAAO,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAA;QAEzD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,OAAe,EAAE,IAAc;QAClC,IAAI,OAAO,GAAG,OAAO,CAAC;QACtB,IAAI,IAAI;YAAE,OAAO,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAA;QACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,OAAe,EAAE,IAAc;QACnC,IAAI,OAAO,GAAG,OAAO,CAAC;QACtB,IAAI,IAAI;YAAE,OAAO,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAA;QACzD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;CACF,CAAA;AA9CoB,aAAa;IADjC,IAAA,oBAAU,EAAC,gBAAgB,CAAC;IAGxB,WAAA,IAAA,kBAAM,EAAC,QAAQ,CAAC,CAAA;qCAA0B,gBAAM;GAFhC,aAAa,CA8CjC;kBA9CoB,aAAa","debug_id":"5925b933-2a8a-55d9-b738-e0a81f0de7e2"}