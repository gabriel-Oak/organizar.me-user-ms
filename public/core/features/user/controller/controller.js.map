{"version":3,"file":"controller.js","sources":["core/features/user/controller/controller.ts"],"sourceRoot":"/","sourcesContent":["import { FastifyReply, FastifyRequest } from 'fastify';\nimport Controller from '../../../utils/decorators/controller/controller';\nimport HttpError from '../../../utils/errors/http-error';\nimport UserSchema, { UserSchemaProps } from '../schemas/user-schema';\nimport { IAuthenticateUserUsecase, LoginPayload } from '../usecases/authenticate-user/types';\nimport { IDecodeUserTokenUsecase } from '../usecases/decode-user-token/types';\nimport { IInsertUserUsecase } from '../usecases/insert-user/types';\nimport { ISignUserTokenUsecase } from '../usecases/sign-user-token/types';\nimport { IValidateUserUsecase } from '../usecases/validate-user/types';\nimport privateRoute from '../../../utils/decorators/controller/private-route';\nimport { ChangePasswordBody, IChangePasswordUsecase } from '../usecases/change-password/types';\nimport { IUpdateUserUsecase, updateUserSchemaProps } from '../usecases/update-user/types';\nimport Post from '../../../utils/decorators/controller/post';\nimport Get from '../../../utils/decorators/controller/get';\nimport Patch from '../../../utils/decorators/controller/patch';\nimport { inject } from 'inversify';\nimport { IRemoveUserUsecase } from '../usecases/remove-user/types';\nimport Del from '../../../utils/decorators/controller/del';\nimport { IListUsersUsecase, ListUsersIncompleteResult } from '../usecases/list-users/types';\n\n@Controller('/user')\nexport default class UserController {\n  constructor(\n    @inject('IValidateUserUsecase')\n    private readonly validateUser: IValidateUserUsecase,\n\n    @inject('IInsertUserUsecase')\n    private readonly insertUser: IInsertUserUsecase,\n\n    @inject('ISignUserTokenUsecase')\n    private readonly signUserToken: ISignUserTokenUsecase,\n\n    @inject('IAuthenticateUserUsecase')\n    private readonly authenticateUser: IAuthenticateUserUsecase,\n\n    @inject('IDecodeUserTokenUsecase')\n    private readonly decodeUserToken: IDecodeUserTokenUsecase,\n\n    @inject('IChangePasswordUsecase')\n    private readonly changePassword: IChangePasswordUsecase,\n\n    @inject('IUpdateUserUsecase')\n    private readonly updateUser: IUpdateUserUsecase,\n\n    @inject('IRemoveUserUsecase')\n    private readonly removeUser: IRemoveUserUsecase,\n\n    @inject('IListUsersUsecase')\n    private readonly listUsers: IListUsersUsecase\n  ) { }\n\n  @Get('/list')\n  async list(req: FastifyRequest, reply: FastifyReply) {\n    const userIds = (req.query as any)?.userIds || '';\n    const result = await this.listUsers.execute(userIds.split(','));\n\n    if (result.isError) {\n      const error = new HttpError({\n        ...result.error,\n        statusCode: result.error.type === 'list-user-validation'\n          ? 400\n          : 500\n      });\n      return await reply.code(error.statusCode).send(error);\n    }\n\n    return await reply.code(\n      result.success instanceof ListUsersIncompleteResult ? 207 : 200\n    ).send(result.success);\n  }\n\n  @Post('/new')\n  async new(req: FastifyRequest, reply: FastifyReply) {\n    const payload = req.body as Omit<UserSchemaProps, 'id'>;\n    const validate = this.validateUser.execute(payload);\n    if (validate.isError) {\n      const error = new HttpError({\n        ...validate.error,\n        statusCode: 400\n      });\n      return await reply.code(error.statusCode).send(error);\n    }\n\n    const insertResult = await this.insertUser.execute(payload);\n    if (insertResult.isError) {\n      const error = new HttpError(insertResult.error);\n      if (insertResult.error.type === 'insert-user-already-exist') error.statusCode = 409;\n      return await reply.code(error.statusCode).send(error);\n    }\n\n    const { success: user } = insertResult;\n    const auth = this.signUserToken.execute(user);\n    return await reply.send({ auth, user });\n  }\n\n  @Post('/authenticate')\n  async authenticate(req: FastifyRequest, reply: FastifyReply) {\n    const payload = req.body as LoginPayload;\n    const authResult = await this.authenticateUser.execute(payload);\n    if (authResult.isError) {\n      const error = new HttpError({\n        ...authResult.error,\n        statusCode: {\n          'authenticate-user-not-found': 404,\n          'authenticate-user-wrong-password': 403,\n          'authenticate-invalid': 400\n        }[String(authResult.error.type)] ?? 500\n      });\n      return await reply.code(error.statusCode).send(error);\n    }\n\n    const { success: user } = authResult;\n    const auth = this.signUserToken.execute(user);\n    return await reply.send({ user, auth });\n  }\n\n  @Get('/decode')\n  @privateRoute()\n  async decode(req: FastifyRequest, reply: FastifyReply, user: UserSchema) {\n    return await reply.send(user.getProps());\n  }\n\n  @Patch('/change-password')\n  @privateRoute()\n  async changeUserPassword(req: FastifyRequest, reply: FastifyReply, user: UserSchema) {\n    const { body } = req as { body: ChangePasswordBody };\n    const result = await this.changePassword.execute({\n      ...body,\n      userId: user.id as unknown as string\n    });\n    if (!result.isError) return await reply.send({ message: result.success });\n\n    const error = new HttpError(result.error)\n    if (result.error.type === 'change-password-invalid-pass') {\n      error.statusCode = 400;\n    }\n    return await reply.code(error.statusCode).send(error);\n  }\n\n  @Patch('/update-user')\n  @privateRoute()\n  async update(req: FastifyRequest, reply: FastifyReply, user: UserSchema) {\n    const { body } = req as { body: updateUserSchemaProps };\n    const result = await this.updateUser.execute(user, body);\n    if (!result.isError) return await reply.send();\n\n    const error = new HttpError(result.error);\n    if (result.error.type === 'update-user-invalid-pass') error.statusCode = 403;\n    return await reply.code(error.statusCode).send(error);\n  }\n\n  @Del('/remove')\n  @privateRoute()\n  async remove(_: FastifyRequest, reply: FastifyReply, user: UserSchema) {\n    const result = await this.removeUser.execute(user);\n    if (!result.isError) return await reply.send();\n\n    const error = new HttpError(result.error);\n    return await reply.code(error.statusCode).send(error);\n  }\n}\n"],"names":[],"mappings":"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","debug_id":"7aafb8db-ddc0-5a87-b868-24f3492bb689"}