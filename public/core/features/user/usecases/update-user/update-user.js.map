{"version":3,"file":"update-user.js","sources":["core/features/user/usecases/update-user/update-user.ts"],"sourceRoot":"/","sourcesContent":["import { inject } from 'inversify';\r\nimport Injectable from '../../../../utils/decorators/injectable';\r\nimport { Left } from '../../../../utils/types';\r\nimport { IInternalUserDatasource } from '../../datasources/internal-datasource/types';\r\nimport UserSchema from '../../schemas/user-schema';\r\nimport { IUpdateUserUsecase, UpdateUserInvalidPassError, updateUserProps } from './types';\r\n\r\n@Injectable('IUpdateUserUsecase')\r\nexport default class UpdateUserUsecase implements IUpdateUserUsecase {\r\n  constructor(\r\n    @inject('IInternalUserDatasource')\r\n    private readonly userDatasource: IInternalUserDatasource\r\n  ) {}\r\n\r\n  async execute(user: UserSchema, payload: updateUserProps) {\r\n    const passIsValid = payload.password && await user.comparePasswords(payload.password);\r\n    if (!passIsValid) return new Left(new UpdateUserInvalidPassError());\r\n\r\n    user.updateProps(payload);\r\n    return await this.userDatasource.update(user);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,yCAAmC;AACnC,yFAAiE;AACjE,mDAA+C;AAG/C,mCAA0F;AAG3E,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IACpC,YAEmB,cAAuC;QAAvC,mBAAc,GAAd,cAAc,CAAyB;IACvD,CAAC;IAEJ,KAAK,CAAC,OAAO,CAAC,IAAgB,EAAE,OAAwB;QACtD,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,WAAW;YAAE,OAAO,IAAI,YAAI,CAAC,IAAI,kCAA0B,EAAE,CAAC,CAAC;QAEpE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1B,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;CACF,CAAA;AAboB,iBAAiB;IADrC,IAAA,oBAAU,EAAC,oBAAoB,CAAC;IAG5B,WAAA,IAAA,kBAAM,EAAC,yBAAyB,CAAC,CAAA;;GAFjB,iBAAiB,CAarC;kBAboB,iBAAiB","debug_id":"e5e9ba1d-821c-5d7d-ac33-b40b10566f59"}