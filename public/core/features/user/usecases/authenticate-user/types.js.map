{"version":3,"file":"types.js","sources":["core/features/user/usecases/authenticate-user/types.ts"],"sourceRoot":"/","sourcesContent":["import BaseError from '../../../../utils/errors/base-error';\r\nimport { Either } from '../../../../utils/types';\r\nimport { InternalUserDatasourceError } from '../../datasources/internal-datasource/types';\r\nimport UserModel from '../../models/user-model';\r\n\r\nexport interface LoginPayload {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport class AuthenticateInvalidError extends BaseError {\r\n  public readonly type = 'authenticate-invalid';\r\n  constructor() { super('Oh looks like you didn\\'t specify an email or a password'); }\r\n}\r\n\r\nexport class AuthenticateUserNotFoundError extends BaseError {\r\n  public readonly type = 'authenticate-user-not-found';\r\n  constructor() { super('Sorry couldn\\'t find any user for this email =/'); }\r\n}\r\n\r\nexport class AuthenticateUserWrongPasswordError extends BaseError {\r\n  public readonly type = 'authenticate-user-wrong-password';\r\n  constructor() { super('Wrong password, please try again'); }\r\n}\r\n\r\nexport type authenticateUserErrors = InternalUserDatasourceError\r\n| AuthenticateUserNotFoundError\r\n| AuthenticateUserWrongPasswordError\r\n| AuthenticateInvalidError;\r\n\r\nexport interface IAuthenticateUserUsecase {\r\n  execute: (payload: LoginPayload) => Promise<Either<authenticateUserErrors, UserModel>>\r\n}\r\n"],"names":[],"mappings":";;;;;;;;AAAA,qFAA4D;AAU5D,MAAa,wBAAyB,SAAQ,oBAAS;IAErD;QAAgB,KAAK,CAAC,0DAA0D,CAAC,CAAC;QADlE,SAAI,GAAG,sBAAsB,CAAC;IACqC,CAAC;CACrF;AAHD,4DAGC;AAED,MAAa,6BAA8B,SAAQ,oBAAS;IAE1D;QAAgB,KAAK,CAAC,iDAAiD,CAAC,CAAC;QADzD,SAAI,GAAG,6BAA6B,CAAC;IACqB,CAAC;CAC5E;AAHD,sEAGC;AAED,MAAa,kCAAmC,SAAQ,oBAAS;IAE/D;QAAgB,KAAK,CAAC,kCAAkC,CAAC,CAAC;QAD1C,SAAI,GAAG,kCAAkC,CAAC;IACC,CAAC;CAC7D;AAHD,gFAGC","debug_id":"77c53fca-bfb3-5bc6-952f-182460b8ca6c"}