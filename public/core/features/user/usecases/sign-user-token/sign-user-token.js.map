{"version":3,"file":"sign-user-token.js","sources":["core/features/user/usecases/sign-user-token/sign-user-token.ts"],"sourceRoot":"/","sourcesContent":["import UserModel from '../../models/user-model';\r\nimport { ISignUserTokenUsecase } from './types';\r\nimport jwt from 'jsonwebtoken';\r\nimport { JWT_SECRET } from '../../../../utils/constants';\r\nimport { ICacheService } from '../../../../utils/services/cache-service/types';\r\nimport Injectable from '../../../../utils/decorators/injectable';\r\nimport { inject } from 'inversify';\r\n\r\n@Injectable('ISignUserTokenUsecase')\r\nexport default class SignUserTokenUsecase implements ISignUserTokenUsecase {\r\n  constructor(\r\n    @inject('ICacheService')\r\n    private readonly chage: ICacheService\r\n  ) { }\r\n\r\n  execute(user: UserModel) {\r\n    const newUser = new UserModel({ ...user, password: undefined });\r\n    void this.chage.set(`user:${user.id!}`, newUser);\r\n\r\n    return jwt.sign(newUser.getProps(), JWT_SECRET, { expiresIn: '24h' });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,yEAAgD;AAEhD,gEAA+B;AAC/B,2DAAyD;AAEzD,yFAAiE;AACjE,yCAAmC;AAGpB,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IACvC,YAEmB,KAAoB;QAApB,UAAK,GAAL,KAAK,CAAe;IACnC,CAAC;IAEL,OAAO,CAAC,IAAe;QACrB,MAAM,OAAO,GAAG,IAAI,oBAAS,CAAC,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;QAChE,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,EAAG,EAAE,EAAE,OAAO,CAAC,CAAC;QAEjD,OAAO,sBAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,sBAAU,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;IACxE,CAAC;CACF,CAAA;AAZoB,oBAAoB;IADxC,IAAA,oBAAU,EAAC,uBAAuB,CAAC;IAG/B,WAAA,IAAA,kBAAM,EAAC,eAAe,CAAC,CAAA;;GAFP,oBAAoB,CAYxC;kBAZoB,oBAAoB","debug_id":"d1888c86-c364-5aed-92a8-4d65d5810c2c"}