{"version":3,"file":"insert-user.js","sources":["core/features/user/usecases/insert-user/insert-user.ts"],"sourceRoot":"/","sourcesContent":["import { inject } from 'inversify';\r\nimport Injectable from '../../../../utils/decorators/injectable';\r\nimport { Left } from '../../../../utils/types';\r\nimport { IInternalUserDatasource } from '../../datasources/internal-datasource/types';\r\nimport UserModel, { UserProps } from '../../models/user-model';\r\nimport { IInsertUserUsecase, InsertUserAlreadyExist } from './types';\r\n\r\n@Injectable('IInsertUserUsecase')\r\nexport default class InsertUserUsecase implements IInsertUserUsecase {\r\n  constructor(\r\n    @inject('IInternalUserDatasource')\r\n    private readonly userDatasource: IInternalUserDatasource\r\n  ) { }\r\n\r\n  async execute(user: Omit<UserProps, 'id'>) {\r\n    const existResult = await this.userDatasource.findByEmail(user.email);\r\n    if (existResult.isError) return existResult;\r\n    if (existResult.success) return new Left(new InsertUserAlreadyExist());\r\n\r\n    const userResult = await this.userDatasource.save(new UserModel(user));\r\n    return userResult;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,yCAAmC;AACnC,yFAAiE;AACjE,mDAA+C;AAE/C,yEAA+D;AAC/D,mCAAqE;AAGtD,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IACpC,YAEmB,cAAuC;QAAvC,mBAAc,GAAd,cAAc,CAAyB;IACtD,CAAC;IAEL,KAAK,CAAC,OAAO,CAAC,IAA2B;QACvC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtE,IAAI,WAAW,CAAC,OAAO;YAAE,OAAO,WAAW,CAAC;QAC5C,IAAI,WAAW,CAAC,OAAO;YAAE,OAAO,IAAI,YAAI,CAAC,IAAI,8BAAsB,EAAE,CAAC,CAAC;QAEvE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,oBAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACvE,OAAO,UAAU,CAAC;IACpB,CAAC;CACF,CAAA;AAdoB,iBAAiB;IADrC,IAAA,oBAAU,EAAC,oBAAoB,CAAC;IAG5B,WAAA,IAAA,kBAAM,EAAC,yBAAyB,CAAC,CAAA;;GAFjB,iBAAiB,CAcrC;kBAdoB,iBAAiB","debug_id":"0df7e9ec-830c-5ef8-b3ef-9dad19a41f68"}