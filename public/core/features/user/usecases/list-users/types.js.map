{"version":3,"file":"types.js","sources":["core/features/user/usecases/list-users/types.ts"],"sourceRoot":"/","sourcesContent":["import BaseError from '../../../../utils/errors/base-error';\nimport { Either } from '../../../../utils/types';\nimport { InternalUserDatasourceError } from '../../datasources/internal-datasource/types';\nimport User from '../../entities/user';\n\nexport interface ListUsersResult {\n  users: User[];\n  usersNotFound: string[];\n}\n\nexport class ListUsersCompleteResult implements ListUsersResult {\n  users!: User[];\n  usersNotFound!: string[];\n\n  constructor(users: User[]) {\n    Object.assign(this, { users, usersNotFound: [] });\n  }\n}\n\nexport class ListUsersIncompleteResult implements ListUsersResult {\n  users!: User[];\n  usersNotFound!: string[];\n\n  constructor({ users, usersNotFound }: ListUsersResult) {\n    Object.assign(this, { users, usersNotFound });\n  }\n}\n\nexport class ListUsersValidationError extends BaseError {\n  public readonly type = 'list-user-validation';\n\n  constructor() {\n    super('VocÃª precisa informar uma lista valida de ids');\n  }\n}\n\nexport type listUsersErrors = ListUsersValidationError | InternalUserDatasourceError;\nexport type listUsersResult = ListUsersCompleteResult | ListUsersIncompleteResult;\n\nexport interface IListUsersUsecase {\n  execute: (userIds: string[]) => Promise<Either<listUsersErrors, listUsersResult>>;\n}\n"],"names":[],"mappings":";;;;;;;;AAAA,qFAA4D;AAU5D,MAAa,uBAAuB;IAIlC,YAAY,KAAa;QACvB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;IACpD,CAAC;CACF;AAPD,0DAOC;AAED,MAAa,yBAAyB;IAIpC,YAAY,EAAE,KAAK,EAAE,aAAa,EAAmB;QACnD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;IAChD,CAAC;CACF;AAPD,8DAOC;AAED,MAAa,wBAAyB,SAAQ,oBAAS;IAGrD;QACE,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAHzC,SAAI,GAAG,sBAAsB,CAAC;IAI9C,CAAC;CACF;AAND,4DAMC","debug_id":"57c163cb-3ce3-5e28-8962-194065c94f5b"}